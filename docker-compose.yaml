version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastify_app_service
    ports:
      - "3000:3000"
    volumes:
      - app_logs:/app/logs
    environment:
      NODE_ENV: development
      # Variáveis para debug do APM
      ELASTIC_APM_LOG_LEVEL: debug
      ELASTIC_APM_ACTIVE: true
    depends_on:
      elasticsearch:
        condition: service_healthy
      apm-server:
        condition: service_started
    networks:
      - elastic_monitoring_net
    restart: unless-stopped
    # Aguardar mais tempo para os serviços subirem
    command: sh -c "sleep 45 && node src/api1.js"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  app2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: express_app2_service
    ports:
      - "3001:3001"
    volumes:
      - app_logs:/app/logs
    environment:
      NODE_ENV: development
      ELASTIC_APM_LOG_LEVEL: debug
      ELASTIC_APM_ACTIVE: true
    depends_on:
      elasticsearch:
        condition: service_healthy
      apm-server:
        condition: service_started
    networks:
      - elastic_monitoring_net
    restart: unless-stopped
    command: sh -c "sleep 45 && node src/app2.js"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch_service
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - ELASTIC_PASSWORD=12345678
      - xpack.security.authc.api_key.enabled=true
      # Configurações importantes para APM
      - action.auto_create_index=true
      - cluster.routing.allocation.disk.threshold_enabled=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:12345678 -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 15s
      timeout: 10s
      retries: 15
    networks:
      - elastic_monitoring_net
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana_service
    ports:
      - "5601:5601"
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - elastic_monitoring_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:5601/api/status | grep -q '\"overall\":{\"level\":\"available\"'"]
      interval: 30s
      timeout: 10s
      retries: 10

  apm-server:
    image: docker.elastic.co/apm/apm-server:8.13.4
    container_name: apm_server
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "8200:8200"
    volumes:
      - ./apm-server/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
    networks:
      - elastic_monitoring_net
    restart: unless-stopped

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.13.4
    container_name: filebeat_service
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - app_logs:/var/log/app:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
      app:
        condition: service_started
    networks:
      - elastic_monitoring_net
    command: filebeat -e -strict.perms=false
    restart: unless-stopped

volumes:
  es_data:
    driver: local
  app_logs:
    driver: local 

networks:
  elastic_monitoring_net:
    driver: bridge